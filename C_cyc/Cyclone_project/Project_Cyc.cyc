#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>

#define SENDER 0
#define RECEIVER 1
#define PLACE 2

#define MAX_NAMES_LENGTH 30
#define MAX_PLACES_LENGTH 30

#define MAX_LINE_LENGTH 95
#define MAX_POSTCARDS_IN_FILE 50

#define FILE_PATH "../Cyclone_project/PostcardsSimplified.txt"
#define BY_SENDER   49 // 1
#define BY_REC	    50 // 2
#define BY_PLACE    51 // 3
#define CHANGE_MODE	81 // Q
#define DEBUG 	    68 // D
#define NO_DEBUG    73 // I (iterative)
#define TERMINATE   84 // T
#define NONE        0

int number_of_postcards_parsed = 0; // From 0 to (MAX_POSTCARDS_IN_FILE - 1) readFile
int nop_found = 0; //findBy

// Dropped because, if memory cannot be allocated, a null pointer exception
// will be raised when dereferencing the null pointer returned by the memory allocation function
//void outofmemory() {
//	printf("Out of memory error!\n");
//	exit(1);
//}

typedef struct postcard {
	char* @notnull @fat sender_name;
	char* @notnull @fat receiver_name;
	char* @notnull @fat place;
} postcard;

// Destructively converts the given zero-terminated string to lowercase
int min(int a, int b) { 
	return (a < b) ? a : b;
}

int safe_strncpy(char * @notnull @fat dst, const char * @notnull @fat src, unsigned int n) {
    int m = min(min(numelts(dst), numelts(src))-1, n);
    for (int i = 0; i < m; i++)
        *(dst+i) = *(src+i);
    return m;
}

int safe_strcpy(char * @notnull @fat dst, const char * @notnull @fat src) {
    int n = min(numelts(dst), numelts(src));
    return safe_strncpy(dst, src, n-1);
}

void str2lower(char * @fat @zeroterm str) {
	while (*str) {
		if (*str >= 65 && *str <= 90) { // a-z
			*str += 32;
		}
		str++;
	}
}

// Divides the given string into tokens, delimited in the original string by the given delimiter character.
// Returns an array of tokens.
//Delimiters are not part of the tokens.
char?? tokenize(const char? str, char delimiter) {
	const char? s = str;

	// Counts occurrences of the tokens (= delimiters + 1)
	int tokenCount = 1;
	while (*s) {
		if (*s == delimiter)
			tokenCount++;
		s++;
	}

	// Allocate space for tokens array
	char?? t = (char??) calloc(tokenCount, sizeof(char?));

	s = str;
	const char? p = str;
	tokenCount = 0;

	// Scan the string, storing the start (p) and end (s) of
	// every token, and copying the token into the array
	while (1) {
		while (*s != delimiter && *s != '\0' && *s != '\n') {
			s++;
		}

		// s points to the delimiter right after the current token
		int len = s - p;
		t[tokenCount] = calloc((len + 1), sizeof(char));

		safe_strncpy(t[tokenCount], p, len);
		t[tokenCount][len] = '\0'; // Add null char at the end of tokenCount-esimo token
		tokenCount++;

		// when the end of the string has been reached, end the loop
		if (*s == '\0' || *s == '\n')
			break;

		// otherwise, skip the delimiter
		s++;
		p = s; // now p points to the next token's first char
	}
	
	return t;
}

void printPostcard (postcard? p) {
	printf("----------------\n");
	printf("from: %s\n", p->sender_name);
	printf("to: %s\n", p->receiver_name);
	printf("place: %s\n", p->place);
	printf("----------------\n");
}


// Read the file and create a list of postcard object, only if it's present all the needed informations.
// Returns the number of postcards (as a parameter) and the reference of such postcard (as the return value).
postcard?? readFile() {
	postcard?? postcards = (postcard??) calloc(MAX_POSTCARDS_IN_FILE, sizeof(postcard?));
	
	// Try to open the file located at FILE_PATH
	FILE* filePointer = fopen(FILE_PATH, "r");
	if(filePointer == NULL) {
		printf("Error opening file %s\n", FILE_PATH);
		return postcards;
	} else {
		printf("FILE OPENED %s\n", FILE_PATH);
	}
	
	char line[MAX_LINE_LENGTH + 1] @zeroterm;

	while (1) {
		// If the end of file is treached, break the loop
		if (fscanf(filePointer, "%s", line) == -1) {
			break;
		}

		printf("\nLength: %d --> %s\n", strlen(line),line);
		
		// Allocate memory for struct
		postcard* pc = (postcard*) malloc(sizeof(postcard));
		pc->sender_name = (char*@notnull @fat) calloc(MAX_NAMES_LENGTH + 1, sizeof(char));
		pc->receiver_name = (char*@notnull @fat) calloc(MAX_NAMES_LENGTH + 1, sizeof(char));
		pc->place = (char*@notnull @fat) calloc(MAX_PLACES_LENGTH + 1, sizeof(char));

		char?? tokens = (char??) calloc(strlen(line) + 1, sizeof(char?));
		const char? l = (char?) calloc(MAX_LINE_LENGTH + 1, sizeof(char));
		l = strdup(line);
		
		// Divde the line just read in tokens
		tokens = tokenize(l, '|');
		int numberOfToken = numelts(tokens);

		// Check the correct number of informations parsed from each file line
		// Must be three: SENDER - RECEIVER - PLACE
		if(numberOfToken == 3) {
			for (int i = 0; i < numberOfToken; i++) {
				str2lower(tokens[i]);
				// Check tokens before acces it
				if(tokens[i] != NULL) {
					const char * @notnull @fat safe_token = tokens[i];
					switch (i) {
						case SENDER:
							safe_strcpy(pc->sender_name, safe_token);
							break;
						case RECEIVER:
							safe_strcpy(pc->receiver_name, safe_token);
							break;
						case PLACE:
							safe_strcpy(pc->place, safe_token);
							break;
						default:
							break;
					}
				} else {
					printf("TOKENS NOT SAFE");
				}
			}
		}
		
		printPostcard(pc);
		if(pc != NULL) {
			*(postcards + number_of_postcards_parsed) = pc;
			number_of_postcards_parsed = number_of_postcards_parsed + 1;
		} else {
			printf("__ERROR ON POSTCARD ___\n");
		}
	}
	
	// Close the file
	fclose(filePointer);
	return postcards;
}

// Search postcards and return them. If number of informations it's not enough, return NULL postcard
postcard?`H?`H findBy(postcard?`H?`H postcards,const char? str_src, int findBy) {
	postcard?`H?`H res = (postcard?`H?`H) malloc(sizeof(postcard?`H) * number_of_postcards_parsed);
	nop_found = 0;
	
	for(int i = 0; i < number_of_postcards_parsed; i++) {
		if(findBy == BY_SENDER &&
				strcmp((*(postcards+i))->sender_name, str_src) == 0) { // Check, if searching by sender, on sender name field

			*(res + nop_found) = *(postcards + i);
			nop_found = nop_found + 1;
		} else if(findBy == BY_REC &&
				strcmp((*(postcards+i))->receiver_name, str_src) == 0) { // Check, if searching by receiver, on receiver name field

			*(res + nop_found) = *(postcards + i);
			nop_found = nop_found + 1;
		} else if(findBy == BY_PLACE &&
				strcmp((*(postcards+i))->place, str_src) == 0) { // Check, if searching by place, on place name field

			*(res + nop_found) = *(postcards + i);
			nop_found = nop_found + 1;
		}
	}
	return res;
}

int main(){
	printf("\nSTART\n");
	printf("^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^FILE PARSING^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^");
	postcard?? postcards = (postcard??) malloc(sizeof(postcard?) * MAX_POSTCARDS_IN_FILE);	
	postcards = readFile();
	printf("Number of postcards parsed = %i\n", number_of_postcards_parsed);
	printf("^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n\n\n\n");

	postcard?`H?`H res = (postcard?`H?`H) malloc(sizeof(postcard?`H) * number_of_postcards_parsed);	
	printf("CHOOSE MODE: \n- AUTOMATIC TEST [D]\n- ITERATIVE TEST [I]\n - TERMINATE [T]\n");
	
	int mainCommand;
		
	while (mainCommand != TERMINATE) {
		mainCommand = getchar();
		if(mainCommand == DEBUG) {
			// Test search from hard coded input
			printf("\n\n\n\n\n\nSearch BY SENDER --> ");
			const char? param = "maertin_piffari";
			res = findBy(postcards, param, BY_SENDER);
			printf("Postcard found: \n");
			if(nop_found == 0) {
				printf("----> No postcard match <----\n");
			} else {
				for(int i = 0; i < nop_found; i++) {
					printPostcard(*(res + i));
				}
			}

			printf("Search  BY RECEIVER --> ");
			param = "nicola_piffari";
			res = findBy(postcards, param, BY_REC);
			printf("Postcard found: \n");
			if(nop_found == 0) {
				printf("----> No postcard match <----\n");
			} else {
				for(int i = 0; i < nop_found; i++) {
					printPostcard(*(res + i));
				}
			}

			printf("Search  BY PLACE --> ");
			param = "groenlandia";
			res = findBy(postcards, param, BY_PLACE);
			printf("Postcard found: \n");
			if(nop_found == 0) {
				printf("----> No postcard match <----\n");
			} else {
				for(int i = 0; i < nop_found; i++) {
					printPostcard(*(res + i));
				}
			}

			printf("Search  BY REC [wrong] --> ");
			res = findBy(postcards, param, BY_REC);
			printf("Postcard found: \n");
			if(nop_found == 0) {
				printf("----> No postcard match <----\n");
			} else {
				for(int i = 0; i < nop_found; i++) {
					printPostcard(*(res + i));
				}
			}
		} else if(mainCommand == NO_DEBUG) {
			// Test search from ostream input

			// Console reading through "fgets" append automaticcaly "null"terminator
			int command = NONE;
			char* @fat @zeroterm param = calloc(MAX_LINE_LENGTH + 1, sizeof(char));
			
			while (command != CHANGE_MODE) {
				command = getchar();

				if(command == BY_SENDER) {
					printf("Search BY SENDER --> ");
					scanf("%s",param);
					str2lower(param);
					res = findBy(postcards, param, BY_SENDER);
					printf("Postcard found: \n");
					if(nop_found == 0) {
						command = NONE;
						printf("----> No postcard match <----\n");
					} else {
						for(int i = 0; i < nop_found; i++) {
							printPostcard(*(res + i));
						}
						command = NONE;
					}
				} else if(command == BY_REC) {
					printf("Search BY REC --> ");
					scanf("%s",param);
					str2lower(param);
					res = findBy(postcards, param, BY_REC);
					printf("Postcard found: \n");
					if(nop_found == 0) {
						command = NONE;
						printf("----> No postcard match <----\n");
					} else {
						for(int i = 0; i < nop_found; i++) {
							printPostcard(*(res + i));
						}
						command = NONE;
					}
				} else if(command == BY_PLACE) {
					printf("Search BY PLACE --> ");
					scanf("%s",param);
					//fgets(param, MAX_NAMES_LENGTH, stdi);
					str2lower(param);
					res = findBy(postcards, param, BY_PLACE);
					printf("Postcard found: \n");
					if(nop_found == 0) {
						command = NONE;
						printf("----> No postcard match <----\n");
						continue;
					} else {
						for(int i = 0; i < nop_found; i++) {
							printPostcard(*(res + i));
						}
						command = NONE;
					}
				} else if(command == CHANGE_MODE) {
					printf("CHANGE MODE");
				} else if(command != NONE  && command != CHANGE_MODE && command != BY_PLACE && command != BY_REC && command != BY_SENDER) {
					printf("\n FIND POSTCARD BY: \n- SENDER [1]\n- RECEIVER [2]\n- PLACE [3]\n- CHANGE MODE [Q]\n");
					command = NONE;
					continue;
				}
			}
		} else if(mainCommand == TERMINATE) {
			printf("Goodbye my friend, goodbye my lover, You have been the one for me...");
		} else { 
			printf("\n\n\n\n\nCHOOSE MODE: \n- AUTOMATIC TEST [D]\n- ITERATIVE TEST [I]\n - TERMINATE [T]\n");
		}
	}

	return EXIT_SUCCESS;
}