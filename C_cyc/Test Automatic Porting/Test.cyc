#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>

#define SENDER 0
#define RECEIVER 1
#define PLACE 2

#define MAX_NAMES_LENGTH 30
#define MAX_PLACES_LENGTH 30

#define MAX_LINE_LENGTH 95
#define MAX_POSTCARDS_IN_FILE 50

//#define FILE_PATH "C:\\Users\\miche\\OneDrive\\Desktop\\I anno Magistrale\\Informatica III - Modulo di programmazione\\WS_INFO_III_A\\Project_C_oneFile\\src\\PostcardsSimplified.txt"
#define FILE_PATH "E:/PostcardsSimplified.txt"
#define BY_SENDER 49
#define BY_REC	  50
#define BY_PLACE  51
#define EXIT 	  81

#define DEBUG 0 // Search in automatic way (4 kind of test) [1] or search from command line input [0]

int number_of_postcards_parsed = 0; // From 0 to (MAX_POSTCARDS_IN_FILE - 1) readFile
int nop_found = 0; //findBy

// Dropped because, if memory cannot be allocated, a null pointer exception
// will be raised when dereferencing the null pointer returned by the memory
// allocation function
//void outofmemory() {
//	printf("Out of memory error!\n");
//	exit(1);
//}

typedef struct postcard {
	char* @notnull @fat sender_name;
	char* @notnull @fat receiver_name;
	char* @notnull @fat place;
} postcard;

/* Destructively converts the given zero-terminated string to lowercase */
int min(int a, int b) { 
	return (a < b) ? a : b;
}

int safe_strncpy(char * @notnull @fat dst, const char * @notnull @fat src, unsigned int n) {
    int m = min(min(numelts(dst), numelts(src))-1, n);
    for (int i = 0; i < m; i++)
        *(dst+i) = *(src+i);
    return m;
}

int safe_strcpy(char * @notnull @fat dst, const char * @notnull @fat src) {
    int n = min(numelts(dst), numelts(src));
    return safe_strncpy(dst, src, n-1);
}

void str2lower(char * @fat @zeroterm str) {
	while (*str) {
		if (*str >= 65 && *str <= 90) { // a-z
			*str += 32;
		}
		str++;
	}
}

/*Divides the given string into tokens, delimited in the original string
* by the given delimiter character.
* Returns an array of tokens (as a parameter) and the number of such
* substrings (as the return value). Delimiters are not part of the tokens;
* tokens may also be empty strings.
* If delimiter is '\0', the whole string is one single token.
*/
char?? tokenize(const char? str, char delimiter) {
	const char? s = str;
	// Counts occurrences of the tokens (= delimiters + 1)
	int tokenCount = 1;
	while (*s) {
		if (*s == delimiter)
			tokenCount++;
		s++;
	}

	// Allocate space for tokens array
	char?? t = (char??) calloc(tokenCount, sizeof(char?));

	s = str;
	const char? p = str;
	tokenCount = 0;

	// Scan the string, storing the start (p) and end (s) of
	// every token, and copying the token into the array
	while (1) {
		while (*s != delimiter && *s != '\0' && *s != '\n') {
			s++;
		}

		// s points to the delimiter right after the current token
		int len = s - p;
		t[tokenCount] = calloc((len + 1), sizeof(char));

		safe_strncpy(t[tokenCount], p, len);
		t[tokenCount][len] = '\0'; // Add null char at the end of tokenCount-esimo token
		tokenCount++;

		// when the end of the string has been reached, end the loop
		if (*s == '\0' || *s == '\n')
			break;

		// otherwise, skip the delimiter
		s++;
		p = s; // now p points to the next token's first char
	}
	
	return t;
}

void printPostcard (postcard? p) {
	printf("	----------------\n");
	printf("	from: %s\n", p->sender_name);
	printf("	to: %s\n", p->receiver_name);
	printf("	place: %s\n", p->place);
	printf("	----------------\n");
}


/* Read the file and create a list of postcard object, only if it's present
 * all the needed informations.
 * Returns the number of postcards (as a parameter) and the reference of such
 * postcard (as the return value).
 */
//postcard *@fat readFile(int*‘r *‘r num_of_postcard) {
postcard?? readFile() {
	postcard?? postcards = (postcard??) calloc(MAX_POSTCARDS_IN_FILE, sizeof(postcard?));
		
	FILE* filePointer = fopen(FILE_PATH, "r");
	if(filePointer == NULL) {
		printf("Error opening file %s\n", FILE_PATH);
		return postcards;
	} else {
		printf("FILE OPENED %s\n", FILE_PATH);
	}
	
	char line[MAX_LINE_LENGTH + 1] @zeroterm;

	while (1) {
		if (fscanf(filePointer, "%s", line) == -1)
			break;
		printf("Length: %d --> %s\n", strlen(line),line);
		
		postcard* pc = (postcard*) malloc(sizeof(postcard));
		pc->sender_name = (char*@notnull @fat) calloc(MAX_NAMES_LENGTH + 1, sizeof(char));
		pc->receiver_name = (char*@notnull @fat) calloc(MAX_NAMES_LENGTH + 1, sizeof(char));
		pc->place = (char*@notnull @fat) calloc(MAX_PLACES_LENGTH + 1, sizeof(char));

		char?? tokens = (char??) calloc(strlen(line) + 1, sizeof(char?));
		const char? l = (char?) calloc(MAX_LINE_LENGTH + 1, sizeof(char));
		l = strdup(line);
		
		tokens = tokenize(l, '|');
		int numberOfToken = numelts(tokens);
		

		if(numberOfToken == 3) {
			for (int i = 0; i < numberOfToken; i++) {
				str2lower(tokens[i]);
				if(tokens[i] != NULL) {
					const char * @notnull @fat safe_token = tokens[i];
					printf("%s\n", tokens[i]);
					switch (i) {
						case SENDER:
							//strcpy(pc->sender_name, tokens[i]);
							safe_strcpy(pc->sender_name, safe_token);
							break;
						case RECEIVER:
							//strcpy(pc->receiver_name, tokens[i]);
							safe_strcpy(pc->receiver_name, safe_token);
							break;
						case PLACE:
							//strcpy(pc->place, tokens[i]);
							safe_strcpy(pc->place, safe_token);
							break;
						default:
							break;
					}
				} else {
					printf("TOKENS NOT SAFE");
				}
				
				
			}
		}
		
		printPostcard(pc);
		if(pc != NULL) {
			*(postcards + number_of_postcards_parsed) = pc;
			number_of_postcards_parsed = number_of_postcards_parsed + 1;
		} else {
			printf("__ERROR ON POSTCARD ___\n");
		}
	}
	
	fclose(filePointer);
	return postcards;
}

/*
 * Search postcards and return them.
 * If number of informations it's not enough, return NULL postcard
 */
postcard?`H?`H findBy(postcard?`H?`H postcards,const char? str_src, int findBy) {
	postcard?`H?`H res = (postcard?`H?`H) malloc(sizeof(postcard?`H) * number_of_postcards_parsed);
	nop_found = 0;
	
	for(int i = 0; i < number_of_postcards_parsed; i++) {
		if(findBy == BY_SENDER &&
				strcmp((*(postcards+i))->sender_name, str_src) == 0) {

			*(res + nop_found) = *(postcards + i);
			nop_found = nop_found + 1;
		} else if(findBy == BY_REC &&
				strcmp((*(postcards+i))->receiver_name, str_src) == 0) {

			*(res + nop_found) = *(postcards + i);
			nop_found = nop_found + 1;
		} else if(findBy == BY_PLACE &&
				strcmp((*(postcards+i))->place, str_src) == 0) {

			*(res + nop_found) = *(postcards + i);
			nop_found = nop_found + 1;
		}
	}

	return res;
}

int main(){
	printf("\nSTART\n");	
	postcard?? postcards = (postcard??) malloc(sizeof(postcard?) * MAX_POSTCARDS_IN_FILE);	
	postcards = readFile();
	printf("Number of postcards = %i\n", number_of_postcards_parsed);

	postcard?`H?`H res = (postcard?`H?`H) malloc(sizeof(postcard?`H) * number_of_postcards_parsed);	
	printf("FIND POSTCARD BY: \n- SENDER [1]\n- RECEIVER [2]\n- PLACE [3]"
			"\n- EXIT [Q]\n");
			
	// TEST MANUALE
	if(DEBUG) {
		printf("BY SENDER --> ");
		const char? param = "maertin_piffari";
		res = findBy(postcards, param, BY_SENDER);
		printf("Postcard found: \n");
		if(nop_found == 0) {
			printf("----> No postcard match <----\n");
		} else {
			for(int i = 0; i < nop_found; i++) {
				printPostcard(*(res + i));
			}
		}

		printf("BY RECEIVER --> ");
		param = "nicola_piffari";
		res = findBy(postcards, param, BY_REC);
		printf("Postcard found: \n");
		if(nop_found == 0) {
			printf("----> No postcard match <----\n");
		} else {
			for(int i = 0; i < nop_found; i++) {
				printPostcard(*(res + i));
			}
		}

		printf("BY PLACE --> ");
		param = "groenlandia";
		res = findBy(postcards, param, BY_PLACE);
		printf("Postcard found: \n");
		if(nop_found == 0) {
			printf("----> No postcard match <----\n");
		} else {
			for(int i = 0; i < nop_found; i++) {
				printPostcard(*(res + i));
			}
		}

		printf("BY REC [wrong] --> ");
		res = findBy(postcards, param, BY_REC);
		printf("Postcard found: \n");
		if(nop_found == 0) {
			printf("----> No postcard match <----\n");
		} else {
			for(int i = 0; i < nop_found; i++) {
				printPostcard(*(res + i));
			}
		}
	} else {
		// Console reading through "fgets" append automaticcaly "null"terminator
		int command;
		char* @fat @zeroterm param = calloc(MAX_LINE_LENGTH + 1, sizeof(char));
		
		while (command != EXIT) {
			command = getchar();
			if(command == BY_SENDER) {
				printf("BY SENDER --> ");
				scanf("%s",param);
				str2lower(param);
				res = findBy(postcards, param, BY_SENDER);
				printf("Postcard search: \n");
				if(nop_found == 0) {
					printf("----> No postcard match <----\n");
					printf("FIND POSTCARD BY: \n- SENDER [1]\n- RECEIVER [2]\n- PLACE [3]\n- EXIT [Q]\n");
				} else {
					for(int i = 0; i < nop_found; i++) {
						printPostcard(*(res + i));
					}
					printf("FIND POSTCARD BY: \n- SENDER [1]\n- RECEIVER [2]\n- PLACE [3]\n- EXIT [Q]\n");
				}
			} else if(command == BY_REC) {
				printf("BY REC --> ");
				scanf("%s",param);
				str2lower(param);
				res = findBy(postcards, param, BY_REC);
				printf("Postcard search: \n");
				if(nop_found == 0) {
					printf("----> No postcard match <----\n");
					printf("FIND POSTCARD BY: \n- SENDER [1]\n- RECEIVER [2]\n- PLACE [3]\n- EXIT [Q]\n");
				} else {
					for(int i = 0; i < nop_found; i++) {
						printPostcard(*(res + i));
					}
					printf("FIND POSTCARD BY: \n- SENDER [1]\n- RECEIVER [2]\n- PLACE [3]\n- EXIT [Q]\n");
				}
			} else if(command == BY_PLACE) {
				printf("BY PLACE --> ");
				scanf("%s",param);
				//fgets(param, MAX_NAMES_LENGTH, stdi);
				str2lower(param);
				res = findBy(postcards, param, BY_PLACE);
				printf("Postcard search: \n");
				if(nop_found == 0)  {
					printf("----> No postcard match <----\n");
					printf("FIND POSTCARD BY: \n- SENDER [1]\n- RECEIVER [2]\n- PLACE [3]\n- EXIT [Q]\n");
				} else {
					for(int i = 0; i < nop_found; i++) {
						printPostcard(*(res + i));
					}
					printf("FIND POSTCARD BY: \n- SENDER [1]\n- RECEIVER [2]\n- PLACE [3]\n- EXIT [Q]\n");
				}
			} else if(command == EXIT) {
				printf("EXIT");
			} else { 
				printf("Wrong command \n");
				printf("FIND POSTCARD BY: \n- SENDER [1]\n- RECEIVER [2]\n- PLACE [3]\n- EXIT [Q]\n");
			}
		}
	}
	
	return EXIT_SUCCESS;
}