/*
 ============================================================================
 Name : Project_C_cyc.c
 Author: Michele Piffari
 Version :
 Copyright: No copyright
 Description : Hello World in C, Ansi-style
 ============================================================================
 */

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>

#define USHRT_MAX65535

#define SENDER 0
#define RECEIVER 1
#define DATE 2
#define PLACE 3

#define MAX_NAMES_LENGTH 30
#define MAX_PLACES_LENGTH 30
#define MAX_DATES_LENGTH 22
/*
 * Longest line possible:
 * 	- 2 * MAX_NAMES_LENGTH
 * 	- MAX_PLACES_LENGTH
 *-------------------------------------------------------
 */
#define MAX_LINE_LENGTH 95
#define MAX_POSTCARDS_IN_FILE 500

#define FILE_NAME "C:\\Users\\miche\\OneDrive\\Desktop\\I anno Magistrale\\Informatica III - Modulo di programmazione\\PROGETTI_INFOIIIA_MICHELEPIFFARI\\C_cyc\\PostcardsSimplified.txt"
#define BY_SENDER 1
#define BY_REC	2
#define BY_PLACE3
#define EXIT 	-1

// dropped because, if memory cannot be allocated, a null pointer exception
// will be raised when dereferencing the null pointer returned by the memory
// allocation function
//void outofmemory() {
//	printf("[ERROR] - Out of memory error!\n");
//	exit(EXIT_FAILURE);
//}

typedef struct postcard {
	char* @notnull @zeroterm sender_name;
	char* @notnull @zeroterm receiver_name;
	char* @notnull @zeroterm place;
} postcard;

// ============== STRING UTILS ==============================
int min(int a, int b) { 
	return (a < b) ? a : b; 
}

int safe_strncpy(char* @notnull @fat dst, char* @notnull @fat src, unsigned int n) {
	int m = min(min(numelts(dst), numelts(src))-1, n);
	for (int i = 0; i < m; i++) {
	 	*(dst+i) = *(src+i);
	}
	return m;
}

int safe_strcpy(char* @notnull @fat dst, char* @notnull @fat src) {
	int n = min(numelts(dst), numelts(src));
	return safe_strncpy(dst, src, n-1);
}

/* Destructively converts the given zero-terminated string to lowercase */
/*void str_to_lower(char* @notnull @fat @zeroterm`H str) {
	// @param str: non-null 0-term string
	int len = numelts(str);
	for(unsigned int i = 0; i < len; i ++) {
		if (*(str + i) >= 'A' && *(str + i) <= 'Z') { // a-z
			*(str + i) += 32;
		}
	}
}*/

/* Divides the given string into tokens, delimited in the original string
 * by the given delimiter character.
 * Returns an array of tokens (as a parameter) and the number of such
 * substrings (as the return value). Delimiters are not part of the tokens;
 * tokens may also be empty strings.
 * If delimiter is '\0', the whole string is one single token.
*/
char@? tokenize(const char@ str, char delimiter) {
	// @param str: non-null 0-term string
	// @return: fat array (non-0-term) of 0-term non-null strings

	/*const char@ s = str;

	// counts occurrences of the tokens (= delimiters + 1)
	int tokenCount = 1;

	while (*s) {
		if (*s == delimiter)
			tokenCount++;
		s++;
	}*/

	// allocate space for tokens array
	char@? t = new{for i < tokenCount:
				new {for i < 1: '\0'}
				};

	/*s = str;
	const char@ p = str;
	tokenCount = 0;
	// scan the string, storing the start (p) and end (s) of
	// every token, and copying the token into the array

	while (1) {
		while (*s != delimiter && *s != '\0') {
			s++;
		}

		// s points to the delimiter right after the current token
		int len = s - p;
		char? copiedToken = calloc(len + 1, sizeof(char));
		strncpy(copiedToken, p, len);
		// 0-term not needed: calloc zeroes every allocated locations

		t[tokenCount] = (char@)copiedToken;
		tokenCount++;

		// when the end of the string has been reached, end the loop
		if (*s == '\0')
			break;

		// otherwise, skip the delimiter
		s++;
		p = s; // now p points to the next token's first char
	}*/

	return t;
}
//========================================================================


//* Make postcard.
//* In C: If number of informations it's not enough, return NULL postcard
//* In Cyclone: If number of informations it's not enough, return NO postcard

// postcard@ make_postcard(char@ line) {
// 	postcard@ pc = (postcard@) calloc(1, sizeof(postcard));

// 	char@@ tokens = (char@@) calloc(strlen(line) + 1, sizeof(char@));
// 	int numberOfToken = tokenize(line, '|', &tokens);

// 	// Complete postcard
// 	char@ sender = (char@) calloc(MAX_NAMES_LENGTH + 1, sizeof(char));
// 	char@ receiver = (char@) calloc(MAX_NAMES_LENGTH + 1, sizeof(char));
// 	char@ place = (char@) calloc(MAX_NAMES_LENGTH + 1, sizeof(char));

// 	if(numberOfToken == 3) {
// 		for (int i = 0; i < numberOfToken; i++) {
// 			str2lower(tokens[i]);

// 			printf("%s\n", tokens[i]);
// 			switch (i) {
// 			case SENDER:
// 				safe_strcpy(sender, tokens[i]);
// 				break;
// 			case RECEIVER:
// 				safe_strcpy(receiver, tokens[i]);
// 				break;
// 			case PLACE:
// 				safe_strcpy(place, tokens[i]);
// 				break;
// 			default:
// 				break;
// 			}
// 		}

// 		pc->sender_name = sender;
// 		pc->receiver_name = receiver;
// 		pc->place = place;
// 	}
// 	return pc;
// }

// /* Read the file and create a list of postcard object, only if it's present
//* all the needed informations.
//* Returns the number of postcards (as a parameter) and the reference of such
//* postcard (as the return value).
//*/
// postcard@@ readFile(int@@ num_of_postcard) {
// 	postcard@@ postcards = (postcard@@) calloc(MAX_POSTCARDS_IN_FILE + 1, sizeof(postcard@));
// 	FILE* stream;
// 	// Opening stream file for reading
// 	stream = fopen(FILE_NAME, "r");
// 	if(stream == NULL) {
// 		printf("Error opening file %s\n", FILE_NAME);
// 		return postcards;
// 	}

	char* @fat @zeroterm line = calloc(MAX_POSTCARDS_IN_FILE + 1, sizeof(char));
// 	int index = 0; // From 0 to (MAX_POSTCARDS_IN_FILE - 1)

// 	while(fgets(line, (MAX_LINE_LENGTH + 1), stream) != NULL) {
// 		//puts(line); // Print line

// 		postcard@ postcard = make_postcard(line);
// 		*(postcards + ndex) = postcard;
// 		index = index + 1;
// 	}

// 	*(num_of_postcard) = &index;
// 	fclose(stream);
// 	return postcards;
// }

// /*
//* Search postcards and return them.
//* In C: If number of informations it's not enough, return NULL postcard
//* In Cyclone: If number of informations it's not enough, return NO postcard with a number of found postcard equals to 0
// */
// postcard@@ findBy(postcard@@ postcards, char@ str_src, int@ nop, int findBy) {
// 	postcard@@ res = (postcard@@) calloc((*nop), sizeof(postcard@));
// 	int nop_searched = 0;

// 	int temp = *nop;
// 	for(int i = 0; i < temp; i++) {
// 		if(findBy == BY_SENDER &&
// 				strcmp((*(postcards+i))->sender_name, str_src) == 0) {

// 			*(res + nop_searched) = *(postcards + i);
// 			nop_searched = nop_searched + 1;
// 		} else if(findBy == BY_REC &&
// 				strcmp((*(postcards+i))->receiver_name, str_src) == 0) {

// 			*(res + nop_searched) = *(postcards + i);
// 			nop_searched = nop_searched + 1;
// 		} else if(findBy == BY_PLACE &&
// 				strcmp((*(postcards+i))->place, str_src) == 0) {

// 			*(res + nop_searched) = *(postcards + i);
// 			nop_searched = nop_searched + 1;
// 		}
// 	}

// 	*nop = nop_searched;
// 	return res;
// }

// void printPostcard (postcard@ p) {
// 	printf("	----------------\n");
// 	printf("	from: %s\n", p->sender_name);
// 	printf("	to: %s\n", p->receiver_name);
// 	printf("	place: %s\n", p->place);
// 	printf("	----------------\n");
// }


int main(){
	// Console reading

	/*char@ command = (char@) calloc(MAX_LINE_LENGTH + 1, sizeof(char));
	char@ param = (char@) calloc(MAX_LINE_LENGTH + 1, sizeof(char));
	int@ nop = 0; // Number of postcard
	postcard@@ postcards = (postcard@@) calloc(MAX_POSTCARDS_IN_FILE, sizeof(postcard@));
	postcards = readFile(&nop);
	printf("Number of postcards = %i\n", *nop);
	
	postcard@@ res = (postcard@@) calloc(MAX_POSTCARDS_IN_FILE, sizeof(postcard@));
	printf("FIND POSTCARD BY: \n- SENDER [1]\n- RECEIVER [2]\n- PLACE [3]\n- EXIT [-1]\n");
	while (atoi(command) != EXIT) {

		gets(command);
		if(atoi(command) == BY_SENDER) {
			printf("BY SENDER --> ");
			gets(param);
			int@ nop_searched = nop;
			str2lower(param);
			res = findBy(postcards, param, nop_searched, BY_SENDER);
			printf("Postcard search: \n");
			if(*nop_searched == 0){
				printf("----> No postcard match <----\n");
				printf("FIND POSTCARD BY: \n- SENDER [1]\n- RECEIVER [2]\n- PLACE [3]\n- EXIT [-1]\n");
			} else {
				for(int i = 0; i < *nop_searched; i++) {
					printPostcard(*(res + i));
				}
				printf("FIND POSTCARD BY: \n- SENDER [1]\n- RECEIVER [2]\n- PLACE [3]\n- EXIT [-1]\n");
			}
		} else if(atoi(command) == BY_REC) {
			printf("BY REC --> ");
			gets(param);
			int@ nop_searched = nop;
			str2lower(param);
			res = findBy(postcards, param, nop_searched, BY_REC);
			printf("Postcard search: \n");
			if(*nop_searched == 0){
				printf("----> No postcard match <----\n");
								printf("FIND POSTCARD BY: \n- SENDER [1]\n- RECEIVER [2]\n- PLACE [3]\n- EXIT [-1]\n");
			} else {
				for(int i = 0; i < *nop_searched; i++) {
					printPostcard(*(res + i));
				}
				printf("FIND POSTCARD BY: \n- SENDER [1]\n- RECEIVER [2]\n- PLACE [3]\n- EXIT [-1]\n");
			}
		} else if(atoi(command) == BY_PLACE) {
			printf("BY PLACE --> ");
			gets(param);
			int@ nop_searched = nop;
			str2lower(param);
			res = findBy(postcards, param, nop_searched, BY_PLACE);
			printf("Postcard search: \n");
			if(*nop_searched == 0){
				printf("----> No postcard match <----\n");
				printf("FIND POSTCARD BY: \n- SENDER [1]\n- RECEIVER [2]\n- PLACE [3]\n- DATE [4]\n- EXIT [-1]\n");
			} else {
				for(int i = 0; i < *nop_searched; i++) {
					printPostcard(*(res + i));
				}
				printf("FIND POSTCARD BY: \n- SENDER [1]\n- RECEIVER [2]\n- PLACE [3]\n- DATE [4]\n- EXIT [-1]\n");
			}
		} else if(atoi(command) == EXIT) {
			printf("EXIT");
		}
	}*/

	return EXIT_SUCCESS;
}
